diff --git a/dist/esm/wallet/register.js b/dist/esm/wallet/register.js
index 5c9ee314beef72a295cfead0313c64e183b0a585..02a34ae1e101ee53d01faf2c66d7ba2c216e53f1 100644
--- a/dist/esm/wallet/register.js
+++ b/dist/esm/wallet/register.js
@@ -24,6 +24,7 @@ function registerEnokiWallets({
         icon,
         provider,
         windowFeatures,
+        customAuthorization: config.customAuthorization,
         getCurrentNetwork,
         apiKey: config.apiKey,
         apiUrl: config.apiUrl,
diff --git a/dist/esm/wallet/types.d.ts b/dist/esm/wallet/types.d.ts
index 5b1c85e87c0340c3e6426f3c4088e30a41975759..55c517cddd6484bc857697596e98db193f7b1d58 100644
--- a/dist/esm/wallet/types.d.ts
+++ b/dist/esm/wallet/types.d.ts
@@ -38,12 +38,24 @@ type ClientConfig = {
      */
     getCurrentNetwork: () => Experimental_SuiClientTypes.Network;
 };
+export type EnokiWalletCustomAuthorization = ({ oauthUrl, network, provider }: {
+    oauthUrl: string;
+    provider: AuthProvider;
+    network?: Experimental_SuiClientTypes.Network;
+}) => Promise<{
+    hash: string;
+    search: string;
+}>;
 export type EnokiWalletOptions = {
     /**
      * The window features to use when opening the authorization popup.
      * https://developer.mozilla.org/en-US/docs/Web/API/Window/open#windowfeatures
      */
     windowFeatures?: string | (() => string);
+    /**
+     * A function that returns the URL to use when opening the authorization popup.
+     */
+    customAuthorization?: EnokiWalletCustomAuthorization;
     /**
      * The authentication provider to register the wallet for.
      */
@@ -68,7 +80,7 @@ export type RegisterEnokiWalletsOptions = {
      * Configuration for each OAuth provider.
      */
     providers: Partial<Record<AuthProvider, AuthProviderOptions>>;
-} & Pick<EnokiWalletOptions, 'apiKey' | 'apiUrl' | 'windowFeatures'> & (ClientConfig | {
+} & Pick<EnokiWalletOptions, 'apiKey' | 'apiUrl' | 'windowFeatures' | 'customAuthorization'> & (ClientConfig | {
     /**
      * The SuiClient instance to use when building and executing transactions.
      */
diff --git a/dist/esm/wallet/wallet.d.ts b/dist/esm/wallet/wallet.d.ts
index 78e263ff2f253965aead3857d66380b3d0519d6c..024f57aa5b54ca16f76db1eac577377f6ccb02e0 100644
--- a/dist/esm/wallet/wallet.d.ts
+++ b/dist/esm/wallet/wallet.d.ts
@@ -12,5 +12,5 @@ export declare class EnokiWallet implements Wallet {
     get chains(): `sui:${string & {}}`[];
     get accounts(): ReadonlyWalletAccount[];
     get features(): StandardConnectFeature & StandardDisconnectFeature & StandardEventsFeature & SuiSignTransactionFeature & SuiSignAndExecuteTransactionFeature & SuiSignPersonalMessageFeature & EnokiGetMetadataFeature & EnokiGetSessionFeature;
-    constructor({ name, icon, provider, clientId, redirectUrl, extraParams, windowFeatures, getCurrentNetwork, apiKey, apiUrl, clients, }: EnokiWalletOptions);
+    constructor({ name, icon, provider, clientId, redirectUrl, extraParams, windowFeatures, getCurrentNetwork, apiKey, apiUrl, clients, customAuthorization, }: EnokiWalletOptions);
 }
diff --git a/dist/esm/wallet/wallet.js b/dist/esm/wallet/wallet.js
index 89e915768c503ba1d4e73a561e610d4dfa8f84f5..9d7507768d8ab955c4e87a2508e34cec33aa296f 100644
--- a/dist/esm/wallet/wallet.js
+++ b/dist/esm/wallet/wallet.js
@@ -6,7 +6,7 @@ var __privateGet = (obj, member, getter) => (__accessCheck(obj, member, "read fr
 var __privateAdd = (obj, member, value) => member.has(obj) ? __typeError("Cannot add the same private member more than once") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
 var __privateSet = (obj, member, value, setter) => (__accessCheck(obj, member, "write to private field"), setter ? setter.call(obj, value) : member.set(obj, value), value);
 var __privateMethod = (obj, member, method) => (__accessCheck(obj, member, "access private method"), method);
-var _events, _accounts, _name, _icon, _enokiClient, _state, _provider, _clientId, _redirectUrl, _extraParams, _getCurrentNetwork, _windowFeatures, _signTransaction, _signAndExecuteTransaction, _signPersonalMessage, _getMetadata, _getSession, _on, _connect, _disconnect, _EnokiWallet_instances, getAuthorizedAccounts_fn, getKeypair_fn, getSignerContext_fn, createSession_fn, getPKCEFlowContext_fn, createAuthorizationURL_fn, handleAuthCallback_fn, pkceTokenExchange_fn;
+var _events, _accounts, _name, _icon, _enokiClient, _state, _provider, _clientId, _redirectUrl, _extraParams, _getCurrentNetwork, _windowFeatures, _customAuthorization, _signTransaction, _signAndExecuteTransaction, _signPersonalMessage, _getMetadata, _getSession, _on, _connect, _disconnect, _EnokiWallet_instances, getAuthorizedAccounts_fn, getKeypair_fn, getSignerContext_fn, createSession_fn, getPKCEFlowContext_fn, createAuthorizationURL_fn, handleAuthCallback_fn, pkceTokenExchange_fn;
 import { Transaction } from "@mysten/sui/transactions";
 import { fromBase64, toBase64 } from "@mysten/sui/utils";
 import {
@@ -44,7 +44,8 @@ class EnokiWallet {
     getCurrentNetwork,
     apiKey,
     apiUrl,
-    clients
+    clients,
+    customAuthorization
   }) {
     __privateAdd(this, _EnokiWallet_instances);
     __privateAdd(this, _events);
@@ -59,6 +60,7 @@ class EnokiWallet {
     __privateAdd(this, _extraParams);
     __privateAdd(this, _getCurrentNetwork);
     __privateAdd(this, _windowFeatures);
+    __privateAdd(this, _customAuthorization);
     __privateAdd(this, _signTransaction, async ({ transaction, chain, account, signal }) => {
       signal?.throwIfAborted();
       const { client, keypair } = await __privateMethod(this, _EnokiWallet_instances, getSignerContext_fn).call(this, chain);
@@ -149,6 +151,7 @@ class EnokiWallet {
     __privateSet(this, _redirectUrl, redirectUrl || window.location.href.split("#")[0]);
     __privateSet(this, _extraParams, extraParams);
     __privateSet(this, _windowFeatures, windowFeatures);
+    __privateSet(this, _customAuthorization, customAuthorization);
     __privateSet(this, _getCurrentNetwork, getCurrentNetwork);
     __privateSet(this, _accounts, []);
     __privateGet(this, _state).zkLoginState.subscribe(() => {
@@ -225,6 +228,7 @@ _redirectUrl = new WeakMap();
 _extraParams = new WeakMap();
 _getCurrentNetwork = new WeakMap();
 _windowFeatures = new WeakMap();
+_customAuthorization = new WeakMap();
 _signTransaction = new WeakMap();
 _signAndExecuteTransaction = new WeakMap();
 _signPersonalMessage = new WeakMap();
@@ -292,6 +296,24 @@ getSignerContext_fn = async function(chain) {
   return { client: sessionContext.client, keypair };
 };
 createSession_fn = async function({ network }) {
+  const sessionContext = __privateGet(this, _state).getSessionContext(network);
+  const pkceContext = await __privateMethod(this, _EnokiWallet_instances, getPKCEFlowContext_fn).call(this);
+  const oauthUrl = await __privateMethod(this, _EnokiWallet_instances, createAuthorizationURL_fn).call(this, sessionContext, pkceContext);
+  if (__privateGet(this, _customAuthorization)) {
+    const { hash, search } = await __privateGet(this, _customAuthorization).call(this, {
+      oauthUrl,
+      network,
+      provider: __privateGet(this, _provider)
+    });
+    return await new Promise((resolve, reject) => {
+      __privateMethod(this, _EnokiWallet_instances, handleAuthCallback_fn).call(this, {
+        hash,
+        sessionContext,
+        search,
+        pkceContext
+      }).then(() => resolve(), reject);
+    });
+  }
   const popup = window.open(
     void 0,
     "_blank",
@@ -300,9 +322,7 @@ createSession_fn = async function({ network }) {
   if (!popup) {
     throw new Error("Failed to open popup");
   }
-  const sessionContext = __privateGet(this, _state).getSessionContext(network);
-  const pkceContext = await __privateMethod(this, _EnokiWallet_instances, getPKCEFlowContext_fn).call(this);
-  popup.location = await __privateMethod(this, _EnokiWallet_instances, createAuthorizationURL_fn).call(this, sessionContext, pkceContext);
+  popup.location = oauthUrl;
   return await new Promise((resolve, reject) => {
     const interval = setInterval(() => {
       try {
